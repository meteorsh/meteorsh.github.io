<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>问题解决：安装的Python第三方库seaborn无法导入到jupyter notebook中</title>
      <link href="/posts/29810.html"/>
      <url>/posts/29810.html</url>
      
        <content type="html"><![CDATA[<p><strong>问题描述：</strong><br>我在终端使用pip3 install seaborn库，但奇怪的是我打开jupyter notebook时，它还是说我没有导入成功，坑！！！</p><div align=center><img src="https://img-blog.csdnimg.cn/20200316144943972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p><strong>解决方法：</strong><br>在mac中打开访达进入下面文件夹</p><pre><code>/usr/local/share/jupyter/kernels/python3</code></pre><p>打开kernel.json，进行如下修改</p><p>修改前：</p><div align=center><img src="https://img-blog.csdnimg.cn/20200316145135549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>修改后</p><p>将<code>python</code>修改成<code>/usr/local/bin/python3</code></p><div align=center><img src="https://img-blog.csdnimg.cn/2020031614525377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>重启jupyter notebook，可以发现不会再报错了</p><div align=center><img src="https://img-blog.csdnimg.cn/20200316145424552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>教训：<br>遇到报错，用Google去搜索，然后去GitHub里面的issues找答案，里面会有很多大佬帮你解决问题，而且回答质量非常高。事实证明解决问题看issues比看别人的中文二手博客要高效10倍</p><p>参考资料：</p><ul><li><a href="https://github.com/jupyter/notebook/issues/2359" target="_blank" rel="noopener">Installed package won’t import in notebook #2359</a></li></ul><div align=center><img src="https://img-blog.csdnimg.cn/20200316145734712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub pull request具体过程</title>
      <link href="/posts/5326.html"/>
      <url>/posts/5326.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pull-Request-简单明了的解释"><a href="#Pull-Request-简单明了的解释" class="headerlink" title="Pull Request 简单明了的解释"></a>Pull Request 简单明了的解释</h1><p>“有一个仓库，叫Repo A。你如果要往里贡献代码，首先要Fork这个Repo，于是在你的Github账号下有了一个Repo A2,。然后你在这个A2下工作，Commit，push等。然后你希望原始仓库Repo A合并你的工作，你可以在Github上发起一个Pull Request，意思是请求Repo A的所有者从你的A2合并分支。如果被审核通过并正式合并，这样你就为项目A做贡献了”——摘自知乎某匿名用户 <a href="https://www.zhihu.com/question/21682976/answer/20835845" target="_blank" rel="noopener">链接</a></p><h1 id="Pull-Request的具体过程详解"><a href="#Pull-Request的具体过程详解" class="headerlink" title="Pull Request的具体过程详解"></a>Pull Request的具体过程详解</h1><p>Pull Request的仓库地址<br><a href="https://github.com/timqian/chinese-independent-blogs" target="_blank" rel="noopener">https://github.com/timqian/chinese-independent-blogs</a></p><p>（1）fork你需要pull request的仓库到你自己的账号中</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313002741823.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>（2）git clone这个仓库到你的机器</p><div align=center><img src="https://img-blog.csdnimg.cn/2020031300310156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><div align=center><img src="https://img-blog.csdnimg.cn/20200313003136118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>（3）根据原仓库pull request的具体要求进行文件修改</p><p>PR要求示例：</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313085946107.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_cGhvdG8gYnkgc2h3ZWk=,size_25,color_FFFFFF,t_50,g_center" width="60%"/></div><p>（有些仓库作者让你切换分支，有些不需要）</p><p>本文我所要pull request的要求如下：</p><pre><code>如何提交- 在 ./blogs-original.csv 中填入博客 URL, RSS 及简介- 提交 PR- PR 被 merge 之后 README 通过 ./script.js 生成</code></pre><div align=center><img src="https://img-blog.csdnimg.cn/20200313002543471.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>（4）把修改提交到你克隆下来的仓库中</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313003832294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><div align=center><img src="https://img-blog.csdnimg.cn/20200313003942581.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>（5）在你克隆下来的仓库中，点击New pull request</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313004357642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>自动跳转到原仓库，进行Comparing changes</p><div align=center><img src="https://img-blog.csdnimg.cn/2020031300465444.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>选择compare的分支</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313004814496.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>点击Create pull request</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313004841164.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>（6）最后等着原作者来merge你的pull request即可</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313004859621.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><div align=center><img src="https://img-blog.csdnimg.cn/20200313010015930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><div align=center><img src="https://img-blog.csdnimg.cn/20200313085427832.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><div align=center><img src="https://img-blog.csdnimg.cn/20200313085616239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>参考文档：<br><a href="https://www.zhihu.com/question/21682976/answer/79489643" target="_blank" rel="noopener">GitHub 的 Pull Request 是指什么意思？</a></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jupter notebook %matplotlib</title>
      <link href="/posts/56576.html"/>
      <url>/posts/56576.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在使用jupyter notebook时经常会用到matplotlib库，来实现交互式绘图，能够支持数据查看，数据位置确定，图像移动等功能</p></blockquote><h1 id="matplotlib-notebook（推荐）"><a href="#matplotlib-notebook（推荐）" class="headerlink" title="%matplotlib notebook（推荐）"></a>%matplotlib notebook（推荐）</h1><p>在开头加上如下代码可以在jupyter notebook行内形成交互式的图表</p><pre><code>%matplotlib notebook</code></pre><div align=center><img src="https://img-blog.csdnimg.cn/20200316232613354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="%matplotlib"></a>%matplotlib</h1><p>在开头加上如下代码可以在mac内形成交互式的图表，即会弹出图像窗口</p><pre><code>%matplotlib</code></pre><div align=center><img src="https://img-blog.csdnimg.cn/20200316231933756.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><hr><h1 id="matplotlib-inline"><a href="#matplotlib-inline" class="headerlink" title="%matplotlib inline"></a>%matplotlib inline</h1><p>开头加上如下代码可以显示图像，但无交互功能</p><pre><code>%matplotlib inline</code></pre><div align=center><img src="https://img-blog.csdnimg.cn/20200316233957769.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>如果开头不加上面所说的代码，运行后也会形成一张干巴巴的图片，无法实现交互式功能</p><div align=center><img src="https://img-blog.csdnimg.cn/2020031623271139.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><h1 id="一个细节：在每个单元格运行后，图表被重置"><a href="#一个细节：在每个单元格运行后，图表被重置" class="headerlink" title="一个细节：在每个单元格运行后，图表被重置"></a>一个细节：在每个单元格运行后，图表被重置</h1><p>使用jupyter notebook时有个细节需要注意，在每个单元格运行后，图表被重置，因此对于复杂的图标，你必须将所有的绘图命名放在单个的notebook单元格内</p><div align=center><img src="https://img-blog.csdnimg.cn/20200316234943598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><hr><div align=center><img src="https://img-blog.csdnimg.cn/20200316234832859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><hr>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git pull &amp;&amp; git clone</title>
      <link href="/posts/14023.html"/>
      <url>/posts/14023.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题：git-push-origin-master时报错"><a href="#问题：git-push-origin-master时报错" class="headerlink" title="问题：git push origin master时报错"></a>问题：git push origin master时报错</h1><pre><code>$ git push origin masterTo github.com:meteorsh/demo.git ! [rejected]        master -&gt; master (fetch first)error: failed to push some refs to &#39;git@github.com:meteorsh/demo.git&#39;hint: Updates were rejected because the remote contains work that you dohint: not have locally. This is usually caused by another repository pushinghint: to the same ref. You may want to first integrate the remote changeshint: (e.g., &#39;git pull ...&#39;) before pushing again.hint: See the &#39;Note about fast-forwards&#39; in &#39;git push --help&#39; for details.</code></pre><h1 id="法一：git-pull"><a href="#法一：git-pull" class="headerlink" title="法一：git pull"></a>法一：git pull</h1><p>使用<code>git pull --rebase origin master</code>来合并远程GitHub库和本地库的文件，本地会生成之前你没有进行同步的文件</p><p><strong>举个栗子</strong>：A和B一起开发和维护一个GitHub仓库，周二是A工作，周三是B工作。周一的时候A和B的从远端clone了一份仓库到各自的本地库，但是当A完成周二的工作时，远端GitHub仓库的内容已经有了更新或者说添加了commit，那么到了周三B必须先把自己的本地仓库更新成远端最新的GitHub仓库，然后再开始这一天的工作，这是显然是非常合理的工作流程</p><p>但如果两个人工作时间很近(如只间隔1小时)，那B以为远端GitHub没更新过，其实A已经更新了远端仓库，这时不可避免会出现git push冲突的问题</p><div align=center><img src="https://img-blog.csdnimg.cn/20200313115029204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_cGhvdG8gYnkgc2h3ZWk=,size_25,color_FFFFFF,t_50,g_center" width="70%"/></div><p>所以这时要用到<code>git pull --rebase origin master</code>命令</p><h2 id="1-1-实例演示1"><a href="#1-1-实例演示1" class="headerlink" title="1.1 实例演示1"></a>1.1 实例演示1</h2><p><img src="https://img-blog.csdnimg.cn/202003131014261.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200313101702994.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200313101943652.png" alt=""><br>这时再git push origin master就不会有冲突了<br><img src="https://img-blog.csdnimg.cn/20200313102143427.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200313102125158.png" alt=""></p><p>从远端拉取分支，其实有下面两种方式（两者具体区别我还没有深入研究）</p><pre><code>git pull = git fetch &amp;&amp; git mergegit pull --rebase = git fetch &amp;&amp; git rebase</code></pre><p>这里我再用git pull origin master来拉取分支</p><h2 id="1-2-git-pull命令后fix-conflicts"><a href="#1-2-git-pull命令后fix-conflicts" class="headerlink" title="1.2 git pull命令后fix conflicts"></a>1.2 git pull命令后fix conflicts</h2><p>有时候，使用git pull命令会产生冲突（因为这里远端和本地库都修改了local-test1.txt文件）</p><p>我们需要手动fix冲突，然后添加一个新的commit，最后git push到远端GitHub库<br><img src="https://img-blog.csdnimg.cn/20200313104032204.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200313103532295.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200313104849341.png" alt=""><br><img src="https://img-blog.csdnimg.cn/20200313104806965.png" alt=""><br>然后git push origin master推到远端GitHub库即可</p><p><img src="https://img-blog.csdnimg.cn/20200313105627529.png" alt=""></p><hr><p>PS：这时在终端用glog命令，让我明白了<code>HEAD -&gt; master, origin/master, origin/HEAD</code>这几句话的含义<br><img src="https://img-blog.csdnimg.cn/20200313105241102.png" alt=""></p><h2 id="1-3-使用git-pull前必须先进行git-commit"><a href="#1-3-使用git-pull前必须先进行git-commit" class="headerlink" title="1.3 使用git pull前必须先进行git commit"></a>1.3 使用git pull前必须先进行git commit</h2><p>git pull是建立在你的修改已经加到git的历史世界线上的（commit形成一个结点）</p><ul><li><p>每次使用git pull命令前，需要将本地工作区编辑过的文件添加到暂存区（git add .），或提交到本地仓库中(git commit)，才可以使用该命令拉取指定分支的代码合并到当前分支中</p></li><li><p>每次在操作完git commit命令后，必须拉取一下master分支代码，保持本地正在开发功能逻辑的代码分支代码是最新的，避免后续在提交时冲突过多或覆盖掉其他人的代码的问题出现</p></li></ul><h2 id="1-4-实例演示2"><a href="#1-4-实例演示2" class="headerlink" title="1.4 实例演示2"></a>1.4 实例演示2</h2><p>我在本地修改了local-test1.txt文件，但是还没有git commit，同时远端GitHub我也修改了local-test1.txt文件，此时git会报错<br><img src="https://img-blog.csdnimg.cn/20200313110451342.png" alt=""><br><strong>解决方法</strong>：把本地的所有修改用git commit添加到暂存区，然后再用git pull命令<br><img src="https://img-blog.csdnimg.cn/20200313111222290.png" alt=""><br>未合并冲突前，git记录可视化是这样的<br><img src="https://img-blog.csdnimg.cn/20200313111244175.png" alt=""><br>此时直接git push会报错：Updates were rejected because the tip of your current branch is behind its remote counterpart. Integrate the remote changes<br><img src="https://img-blog.csdnimg.cn/20200313111341261.png" alt=""><br>正确做法当然是先解决冲突(手动修复冲突文件)，然后git commit，最后再git push<br><img src="https://img-blog.csdnimg.cn/20200313111555670.png" alt=""></p><h1 id="法二：git-clone"><a href="#法二：git-clone" class="headerlink" title="法二：git clone"></a>法二：git clone</h1><p> <code>git clone 仓库地址</code></p><p>这时你进入clone的文件夹用git add, git commit, git push等命令就不会出现报错</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Accelerate git clone speed</title>
      <link href="/posts/102340.html"/>
      <url>/posts/102340.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>我们很多时候需要克隆某个GitHub项目（以克隆ItChat库为例），在使用<code>git clone</code>时，那速度简直慢到令人发指<br><img src="https://img-blog.csdnimg.cn/20200308151742622.png" alt=""><br>虽然网上有不少教程说修改DNS或hosts来加速，但我尝试过效果一般，当然用全局代理也是可以的</p></blockquote><p>于是我今天想介绍一个==加速git clone==的非常靠谱且快速的方法，<code>速度从4kb/s飙升到2MB/S</code></p><h1 id="码云是个优秀的“工具人”"><a href="#码云是个优秀的“工具人”" class="headerlink" title="码云是个优秀的“工具人”"></a>码云是个优秀的“工具人”</h1><p><font color=red size=3 face=STHeit>简单来说就是，我们先把GitHub仓库克隆到码云中(10秒完成)，然后在git clone这个码云仓库（因为是国内服务，速度极快），最后修改远端remote链接即可</font></p><h2 id="（1）注册一个码云账号"><a href="#（1）注册一个码云账号" class="headerlink" title="（1）注册一个码云账号"></a>（1）注册一个码云账号</h2><p>码云是国内代码托管服务的领先者，很认真的产品。适合国内程序员习惯，访问速度极快</p><p>官方地址: <a href="https://gitee.com" target="_blank" rel="noopener">https://gitee.com</a><br><img src="https://img-blog.csdnimg.cn/20200308151409610.png" alt=""><br>然后添加Gitee的SSH公钥（如果之前GitHub已经注册生成过SSH公钥，可以直接使用那个公钥）<br><a href="https://blog.csdn.net/shog808/article/details/76563136" target="_blank" rel="noopener">查看本机ssh公钥，生成公钥</a> | <a href="https://gitee.com/help/articles/4181#article-header0" target="_blank" rel="noopener">生成/添加SSH公钥</a></p><h2 id="（2）将GitHub仓库导入到码云Gitee中"><a href="#（2）将GitHub仓库导入到码云Gitee中" class="headerlink" title="（2）将GitHub仓库导入到码云Gitee中"></a>（2）将GitHub仓库导入到码云Gitee中</h2><p><img src="https://img-blog.csdnimg.cn/20200308151532271.png" alt=""><br><strong>10秒内即可完成导入</strong><br><img src="https://img-blog.csdnimg.cn/20200308151810660.png" alt=""></p><h2 id="（3）git-clone-码云仓库"><a href="#（3）git-clone-码云仓库" class="headerlink" title="（3）git clone 码云仓库"></a>（3）git clone 码云仓库</h2><p>复制SSH地址（使用HTTPS可能会克隆失败）<br><img src="https://img-blog.csdnimg.cn/20200308160048359.png" alt=""><br>输入命令<br><code>git clone git@gitee.com:weisenhui/ItChat.git</code><br><img src="https://img-blog.csdnimg.cn/20200308154231871.png" alt=""></p><h2 id="（4）建立文件夹与GitHub的链接"><a href="#（4）建立文件夹与GitHub的链接" class="headerlink" title="（4）建立文件夹与GitHub的链接"></a>（4）建立文件夹与GitHub的链接</h2><p>克隆下来的是文件夹是与远端gitee链接在一起的，因此我们还需要修改remote，建立与原GitHub仓库的链接<br><img src="https://img-blog.csdnimg.cn/20200308154330335.png" alt=""><br>使用命令<br><code>git remote set-url origin https://github.com/littlecodersh/ItChat.git</code><br><img src="https://img-blog.csdnimg.cn/20200308154648826.png" alt=""><br>大功告成！！！</p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to download bilibili videos</title>
      <link href="/posts/2342.html"/>
      <url>/posts/2342.html</url>
      
        <content type="html"><![CDATA[<h1 id="唧唧Down—适合Windows-强烈推荐"><a href="#唧唧Down—适合Windows-强烈推荐" class="headerlink" title="唧唧Down—适合Windows(强烈推荐)"></a>唧唧Down—适合Windows(强烈推荐)</h1><blockquote><p>哔哩哔哩下载神器：唧唧Down<br>官网：<a href="http://client.jijidown.com/" target="_blank" rel="noopener">http://client.jijidown.com/</a></p></blockquote><ul><li>下载完成后，运行软件</li><li>只要把你想下载的b站视频网址复制到该软件就可以下载</li><li>视频清晰度可选1080p，还可以设置是否下载弹幕</li><li>用这款软件再配合potplayer，可以尽情享用b站任何视频</li></ul><p><img src="http://jfile.jijidown.com/Web/client.jijidown.com/img/newlook.png?20171208" alt=""></p><h1 id="Chrome插件—适合Mac-Windows"><a href="#Chrome插件—适合Mac-Windows" class="headerlink" title="Chrome插件—适合Mac/Windows"></a>Chrome插件—适合Mac/Windows</h1><ul><li><p>借助Chrome插件 bilibili哔哩哔哩下载助手<br><img src="https://img-blog.csdnimg.cn/20190930112541271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODI3NTk1,size_16,color_FFFFFF,t_70" alt=""></p></li><li><p>在谷歌应用商城下载安装后在b站视频右下角打开下载助手，点击合并下载即可<br><img src="https://img-blog.csdnimg.cn/2019093011282092.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODI3NTk1,size_16,color_FFFFFF,t_70" alt=""></p></li></ul><h1 id="GitHub开源youtube-dl—适合Mac-Windows"><a href="#GitHub开源youtube-dl—适合Mac-Windows" class="headerlink" title="GitHub开源youtube-dl—适合Mac/Windows"></a>GitHub开源youtube-dl—适合Mac/Windows</h1><p>项目地址: <a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">https://github.com/ytdl-org/youtube-dl</a></p><p>一：mac下安装方法很简单<br>打开终端根目录，输入下面两条命令即可</p><pre><code>sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dlsudo chmod a+rx /usr/local/bin/youtube-dl</code></pre><p>二：使用方法</p><ol><li>youtube-dl 网址      //在哪个文件夹用终端，就会把文件下载到这个文件夹</li><li>youtube-dl 网址 -o ‘你要的名字.mp4’</li><li>youtube-dl -F 网址             //查看支持的视频格式</li><li>youtube-dl -f format编号 网址  //下载对应的视频格式, 一般默认是best画质</li></ol><p>说明: 此方法不仅可以下载b站视频也可以下载youtube视频<br><img src="https://img-blog.csdnimg.cn/20190930144743703.png" alt=""></p><p>至于Windows下使用就更简单了，直接在项目地址那下载exe文件就可以使用了<br><img src="https://img-blog.csdnimg.cn/20190930144933247.png" alt=""></p><h1 id="Downie-适合Mac-强烈推荐"><a href="#Downie-适合Mac-强烈推荐" class="headerlink" title="Downie-适合Mac(强烈推荐)"></a>Downie-适合Mac(强烈推荐)</h1><p>可以下载很多网站的视频，比如Youtube、Bilibili等，号称mac上最好的视频下载器</p><p>注意：这款软件是付费的，但如果长期用的话，这点钱值的花</p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jupyter Notebook vim mode</title>
      <link href="/posts/100323.html"/>
      <url>/posts/100323.html</url>
      
        <content type="html"><![CDATA[<p>我想大多数习惯了vim的人使用一个新的编辑器一定会想问这个编辑器能用vim吗，这个编辑器怎么将 jj 映射到 Esc？作为一名vim爱好者，我也有同样的疑问</p><p>jupyter notebook默认只能修改命令模式，在编辑模式下无法设置快捷键，这让我很不爽，一度想放弃使用它，直到我知道了下面这个项目</p><p>项目地址：<a href="https://github.com/lambdalisue/jupyter-vim-binding" target="_blank" rel="noopener">lambdalisue/jupyter-vim-binding</a></p><p>这个项目能够让我们在jupyter notebook开启vim模式，大大提升我们的工作效率</p><h1 id="安装方法"><a href="#安装方法" class="headerlink" title="安装方法"></a>安装方法</h1><p><strong>只要在终端分别运行下面的代码，就可以成功安装插件</strong></p><pre><code># Create required directory in case (optional)mkdir -p $(jupyter --data-dir)/nbextensions# Clone the repositorycd $(jupyter --data-dir)/nbextensionsgit clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding# Activate the extensionjupyter nbextension enable vim_binding/vim_binding</code></pre><p>如果Activate the extension没成功，重启下终端就行了</p><p>然后再打开jupyter notebook就可以看到一个绿色的方块，说明已经开启了vim模式</p><div align=center><img src="https://img-blog.csdnimg.cn/20200223073816616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_cGhvdG8gYnkgc2h3ZWk=,size_25,color_FFFFFF,t_50,g_center" width="70%"/></div>此时jupyter notebook有三种模式：jupyter 模式、command模式、insert模式使用`:q`可以从vim的command的模式切换成jupyter模式<h1 id="将-jj-映射到-Esc"><a href="#将-jj-映射到-Esc" class="headerlink" title="将 jj 映射到 Esc"></a>将 jj 映射到 Esc</h1><p>在<code>~/.jupyter/custom/custom.js</code>处创建一个<code>custom.js</code>（默认没有这个文件）<br><img src="https://img-blog.csdnimg.cn/20200223074046425.png" alt=""><br>然后将下面的代码加到custom.js，重启jupyter notebook快捷键生效</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// Configure CodeMirror Keymap</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token string">'nbextensions/vim_binding/vim_binding'</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// depends your installation</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Map jj to &lt;Esc> 这里我加了个l，是为了保证光标在同一个位置</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"jj"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Esc>l"</span><span class="token punctuation">,</span> <span class="token string">"insert"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 我自定义的快捷键</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"H"</span><span class="token punctuation">,</span> <span class="token string">"^"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">,</span> <span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"dH"</span><span class="token punctuation">,</span> <span class="token string">"d0"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">":q"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// Swap j/k and gj/gk (Note that &lt;Plug> mappings)</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"j"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Plug>(vim-binding-gj)"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"k"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Plug>(vim-binding-gk)"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"gj"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Plug>(vim-binding-j)"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"gk"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Plug>(vim-binding-k)"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Configure Jupyter Keymap</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token string">'nbextensions/vim_binding/vim_binding'</span><span class="token punctuation">,</span>  <span class="token string">'base/js/namespace'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>vim_binding<span class="token punctuation">,</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Add post callback</span>  vim_binding<span class="token punctuation">.</span>on_ready_callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> km <span class="token operator">=</span> ns<span class="token punctuation">.</span>keyboard_manager<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Allow Ctrl-2 to change the cell mode into Markdown in Vim normal mode</span>    km<span class="token punctuation">.</span>edit_shortcuts<span class="token punctuation">.</span><span class="token function">add_shortcut</span><span class="token punctuation">(</span><span class="token string">'ctrl-2'</span><span class="token punctuation">,</span> <span class="token string">'vim-binding:change-cell-to-markdown'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Update Help</span>    km<span class="token punctuation">.</span>edit_shortcuts<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'rebuild.QuickHelp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Selecting all</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token string">'nbextensions/vim_binding/vim_binding'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   CodeMirror<span class="token punctuation">.</span>Vim<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token string">"&lt;C-a>"</span><span class="token punctuation">,</span> <span class="token string">"ggVG"</span><span class="token punctuation">,</span> <span class="token string">"normal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Use Ctrl + s to save in Vim normal and insert mode</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token string">'nbextensions/vim_binding/vim_binding'</span><span class="token punctuation">,</span>  <span class="token string">'base/js/namespace'</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>vim_binding<span class="token punctuation">,</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// Add post callback</span>  vim_binding<span class="token punctuation">.</span>on_ready_callbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> km <span class="token operator">=</span> ns<span class="token punctuation">.</span>keyboard_manager<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Indicate the key combination to run the commands</span>    km<span class="token punctuation">.</span>edit_shortcuts<span class="token punctuation">.</span><span class="token function">add_shortcut</span><span class="token punctuation">(</span><span class="token string">'ctrl-s'</span><span class="token punctuation">,</span> <span class="token string">'jupyter-notebook:save-notebook'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Update Help</span>    km<span class="token punctuation">.</span>edit_shortcuts<span class="token punctuation">.</span>events<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">'rebuild.QuickHelp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何还想映射其他vim快捷键，只要按照上面的代码格式修改就行了</p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><p><a href="https://github.com/lambdalisue/jupyter-vim-binding/wiki/Customization" target="_blank" rel="noopener">自定义快捷键的官方文档</a></p><ul><li><code>cmd + 1</code>设置为code</li><li><code>cmd + 2</code>设置为markdown</li><li><code>shift + Enter</code>运行当前代码，并进入下一行</li><li><code>s</code>从vim-command模式（绿色）切换到jupyter模式（蓝色）</li><li><code>control + s</code>在vim normal模式和insert模式都能保存文件</li><li><code>option + Enter</code>在vim insert模式运行代码并插入一行</li><li><code>cmd + shift + Enter</code> 运行所有代码 In[*]表示在等待运行</li></ul><p><img src="https://img-blog.csdnimg.cn/20200301182846913.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200301182912913.png" alt="在这里插入图片描述"></p><div align=center><img src="https://img-blog.csdnimg.cn/20200301100641308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_cGhvdG8gYnkgc2h3ZWk=,size_25,color_FFFFFF,t_50,g_center" width="70%"/></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transfer video to audio</title>
      <link href="/posts/20236.html"/>
      <url>/posts/20236.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><blockquote><p>视频文件大小一般都有200-300MB，而有时我只想要这个视频的背景音乐，把视频文件转换为音频文件，这样文件大小就会在10MB以内</p></blockquote><p>使用python可以快速批量的把视频文件转换为音频文件</p><h1 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h1><ul><li><p>安装ffmpy3库</p></li><li><p>用os模块把视频的文件名读取出来，放在列表中</p></li><li><p>然后把所有视频文件后缀替换为音频的格式</p></li><li><p>当然只改后缀是不行的，因为文件属性并没有更改，我们再用FFmpeg方法对转换后的音频文件赋予它音频的属性</p></li></ul><h2 id="Python完整代码"><a href="#Python完整代码" class="headerlink" title="Python完整代码"></a>Python完整代码</h2><p>运行下面代码即可实现视频文件转换为音频文件（注意修改文件路径）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> ffmpy3 <span class="token keyword">import</span> FFmpeg<span class="token comment" spellcheck="true"># filepath：待处理视频的文件路径</span>filepath <span class="token operator">=</span> <span class="token string">"/Users/macos/Documents/Wilson79/GitHub/video-to-mp3/video"</span>filename <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"待处理的视频文件:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output_dir：输出音频文件的路径</span>output_dir <span class="token operator">=</span> <span class="token string">"/Users/macos/Documents/Wilson79/GitHub/video-to-mp3/music"</span><span class="token comment" spellcheck="true"># 读取上次已导出的音频文件名（防止多次运行，出现overwrited的错误）</span>exit_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>output_dir<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已导出的音频文件: "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>exit_filename<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 改文件的后缀名</span>    changefile <span class="token operator">=</span> filepath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    change_postfix_name <span class="token operator">=</span>filename<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'mp4'</span><span class="token punctuation">,</span> <span class="token string">'mp3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'flv'</span><span class="token punctuation">,</span> <span class="token string">'mp3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 另外的视频格式请自行添加</span>    outputfile <span class="token operator">=</span> output_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> change_postfix_name    <span class="token keyword">if</span> change_postfix_name <span class="token keyword">in</span> exit_filename<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>changefile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 利用FFmpeg进行转换</span>    fpg <span class="token operator">=</span> FFmpeg<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">{</span>changefile<span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">,</span>                 outputs<span class="token operator">=</span><span class="token punctuation">{</span>outputfile<span class="token punctuation">:</span> <span class="token string">'-vn -ar 44100 -ac 2 -ab 192 -f mp3'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mp3也可以换成wav等格式</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fpg<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span>    fpg<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n任务完成！！！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运行后的效果"><a href="#运行后的效果" class="headerlink" title="运行后的效果"></a>运行后的效果</h1><p><img src="https://img-blog.csdnimg.cn/20200212160136119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODI3NTk1,size_16,color_FFFFFF,t_70" alt=""></p><div align=center><img src="https://img-blog.csdnimg.cn/20200212153448976.png" width="100%" height="70%" /></div><div align=center><img src="https://img-blog.csdnimg.cn/20200212153510214.png" width="100%" height="70%" /></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
