<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>毕业季的一点思考</title>
      <link href="/posts/32615.html"/>
      <url>/posts/32615.html</url>
      
        <content type="html"><![CDATA[<h1 id="未经历难以彻悟"><a href="#未经历难以彻悟" class="headerlink" title="未经历难以彻悟"></a>未经历难以彻悟</h1><p><strong>听了很多道理我们都过不好一生，就是因为很多道理不经历是不会懂的</strong>。</p><p>不管是别人告诉你，还是你从哪里读到，都不算你真正的理解。只有经历过感受过，你才会把这些道理刻在脑回路上，像一个个函数，针对特定的生活场景（参数），调用特定的道理（函数）。函数多了之后，你面对什么样的场景都能应对自如，从而给人留下成熟、淡定自如的印象。</p><p>所以人生就是一个不断丰富自己函数库的过程，只有不断的去经历，经历自己不曾经历的，体验自己不敢体验的，才能让自己的心脑体都更强大。而且，体验的过程本身就是一件有趣的事，不是吗？</p><p>作者：geekplux<br>链接：<a href="https://geekplux.com/2018/06/01/the-summary-of-graduate-career" target="_blank" rel="noopener">https://geekplux.com/2018/06/01/the-summary-of-graduate-career</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Installed package won&#39;t import in notebook</title>
      <link href="/posts/29810.html"/>
      <url>/posts/29810.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h1><p>我在终端使用pip3 install seaborn库，但奇怪的是我打开jupyter notebook时，它还是说我没有导入成功，坑！！！</p><div align=center><img src="https://img-blog.csdnimg.cn/20200316144943972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p>在mac中打开访达进入下面文件夹</p><pre><code>/usr/local/share/jupyter/kernels/python3</code></pre><p>打开kernel.json，进行如下修改</p><p>修改前：</p><div align=center><img src="https://img-blog.csdnimg.cn/20200316145135549.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>修改后</p><p>将<code>python</code>修改成<code>/usr/local/bin/python3</code></p><div align=center><img src="https://img-blog.csdnimg.cn/2020031614525377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><p>重启jupyter notebook，可以发现不会再报错了</p><div align=center><img src="https://img-blog.csdnimg.cn/20200316145424552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div><h1 id="教训："><a href="#教训：" class="headerlink" title="教训："></a>教训：</h1><p>遇到报错，用Google去搜索，然后去GitHub里面的issues找答案，里面会有很多大佬帮你解决问题，而且回答质量非常高。事实证明解决问题看issues比看别人的中文二手博客要高效10倍</p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><ul><li><a href="https://github.com/jupyter/notebook/issues/2359" target="_blank" rel="noopener">Installed package won’t import in notebook #2359</a></li></ul><div align=center><img src="https://img-blog.csdnimg.cn/20200316145734712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_40,text_ICBAU0hXRUkgIA==,size_25,color_FFFFFF,t_50,g_nw" width="77%"/></div>]]></content>
      
      
      <categories>
          
          <category> 问题解决 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode 236.二叉树的最近公共祖先</title>
      <link href="/posts/1234.html"/>
      <url>/posts/1234.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述（中等难度）"><a href="#题目描述（中等难度）" class="headerlink" title="题目描述（中等难度）"></a>题目描述（中等难度）</h1><p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/" target="_blank" rel="noopener">原题链接</a><br><img src="https://img-blog.csdnimg.cn/20200212170139454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODI3NTk1,size_16,color_FFFFFF,t_70" alt=""></p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><strong>(递归)</strong> $O(n)$</p><p>当我们用递归去做这个题时不要被题目误导，应该要明确一点<br><code>这个函数的功能有三个</code>：给定两个节点 $p$ 和 $q$</p><ol><li>如果 $p$ 和 $q$ 都存在，则返回它们的公共祖先；</li><li>如果只存在一个，则返回存在的一个；</li><li>如果 $p$ 和 $q$ 都不存在，则返回NULL</li></ol><p>本题说给定的两个节点都存在，那自然还是能用上面的函数来解决</p><p><strong>具体思路</strong>：<br>（1） 如果当前结点 $root$ 等于NULL，则直接返回NULL<br>（2） 如果 $root$ 等于 $p$ 或者 $q$ ，那这棵树一定返回 $p$ 或者 $q$<br>（3） 然后递归左右子树，因为是递归，使用函数后可认为左右子树已经算出结果，用 $left$ 和 $right$ 表示<br>（4） 此时若$left$为空，那最终结果只要看 $right$，若 $right$ 为空，那最终结果只要看 $left$<br>（5） 如果 $left$ 和 $right$ 都非空，因为只给了 $p$ 和 $q$ 两个结点，都非空，说明一边一个，因此 $root$ 是他们的最近公共祖先<br>（6） 如果 $left$ 和 $right$ 都为空，则返回空（其实已经包含在前面的情况中了）</p><p>时间复杂度是$O(n)$：每个结点最多遍历一次或用主定理，空间复杂度是$O(n)$：需要系统栈空间</p><h1 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可认为左右子树已经实现了函数的功能</span>        TreeNode<span class="token operator">*</span> left <span class="token operator">=</span>  <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span>             <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> left<span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// p和q在两侧</span>            <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 必须有返回值</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
