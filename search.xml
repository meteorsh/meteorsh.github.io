<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【面试题】老鼠毒药问题（二进制思想）</title>
      <link href="/posts/50822.html"/>
      <url>/posts/50822.html</url>
      
        <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>有 1000 个一模一样的瓶子，其中有 999 瓶是普通的水，有一瓶是毒药。任何喝下毒药的生物都会在一星期之后死亡。现在，你只有 10 只小白鼠和一星期的时间，如何检验出哪个瓶子里有毒药？</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p><strong>步骤一</strong>：给这1000瓶标号：1,2,3,4,5,6…1000，并分别转化为2进制</p><pre><code>   1：0000000001   2：0000000010   3：0000000011   4：0000000100      ......1000：1111101000 </code></pre><p><strong>步骤二</strong>：<code>让第i只老鼠，喝掉所有二进制表示中第i位为1（位置：从右往左1,2,3..）的所有瓶子</code></p><p>例如：第2只老鼠要喝掉所有第2位为1的瓶子</p><pre><code>             #  2：0000000010  3：0000000011  6：0000000110  7：0000000111     ......</code></pre><p><strong>步骤三</strong>：一个周期后查看哪些老鼠死了，第i只老鼠死了，说明毒药瓶子二进制的第i位是1（位置：从右往左1,2,3..），这样根据死了哪几只老鼠，就能得到二进制表示的哪几位是1了，进而最终可以得到毒药的标号</p><p>从上面的推导过程中可以看到，小白鼠的数量n即为瓶子总数N转化为二进制的最高位的位数，如<code>1000：1111101000</code>，最高位是10，所以最少需要10只小白鼠</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>设n为小白鼠数量，N为瓶子数量，只要$2^n$ &gt;= N就可以在一个周期内检验出哪个瓶子里有毒药</p><p>例如：N = 8（有 7 瓶是普通的水，有一瓶是毒药），则只需要3只小白鼠就可以在一个周期内检验出哪个瓶子里有毒药</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer | 数组中重复的数字（基于交换 C++）</title>
      <link href="/posts/35903.html"/>
      <url>/posts/35903.html</url>
      
        <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p><a href="https://www.nowcoder.com/practice/623a5ac0ea5b4e5f95552655361ae0a8?tpId=13&tqId=11203&tPage=3&rp=1&ru=%2Fta%2Fcoding-interviews&qru=%2Fta%2Fcoding-interviews%2Fquestion-ranking" target="_blank" rel="noopener">原题链接</a></p><p>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p><strong>(基于交换)</strong> $O(n)$<br>相似题 <a href="https://leetcode-cn.com/problems/first-missing-positive/" target="_blank" rel="noopener">LeetCode 41.第一个缺失的正数</a></p><ul><li>遍历数组，把元素i放到下标为i的位置上，如果下标为i的位置上元素值不是i，那就把当前位置和下标为i的数进行交换，那么i就到了正确的位置，否则就继续往下遍历数组</li><li>再遍历一次数组，如果元素i和它的下标不相等，说明元素i就是重复的元素了，此题我们通过指针返回其中一个重复元素就可以了</li></ul><p><strong>核心代码</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">swap</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>详细解释</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp">  下标：<span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>  数组：<span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">1</span>遍历数组  i <span class="token operator">=</span> <span class="token number">0</span>时  nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> 那<span class="token number">2</span>应该到下标为<span class="token number">2</span>的位置，所以和<span class="token number">4</span>交换  交换后：<span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">1</span>  继续看换过来后nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>是否在合适的位置，<span class="token number">4</span>应该到下标为<span class="token number">4</span>的位置，所以和<span class="token number">1</span>交换  交换后<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span>  同理我们继续把<span class="token number">1</span>和<span class="token number">3</span>交换  交换后<span class="token operator">:</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">4</span>  然后继续把<span class="token number">3</span>和<span class="token number">4</span>交换  交换后<span class="token operator">:</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span>  注意：此时nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>，已经不需要放到下标为<span class="token number">4</span>的位置了，因为已经有个<span class="token number">4</span>放在那了         因此i <span class="token operator">=</span> <span class="token number">0</span>这种情况结束  i <span class="token operator">=</span> <span class="token number">1</span>时  继续上面的过程  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度是$O(n)$，空间复杂度是$O(1)$</p><h1 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h1><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">// Parameters:</span>    <span class="token comment" spellcheck="true">//        numbers:     an array of integers</span>    <span class="token comment" spellcheck="true">//        length:      the length of array numbers</span>    <span class="token comment" spellcheck="true">//        duplication: (Output) the duplicated number in the array number</span>    <span class="token comment" spellcheck="true">// Return value:       true if the input is valid, and there are some duplications in the array number</span>    <span class="token comment" spellcheck="true">//                     otherwise false</span>    <span class="token keyword">bool</span> <span class="token function">duplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numbers<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> duplication<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Judge if the input is valid</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Make the element in the right position</span>        <span class="token comment" spellcheck="true">// Such as element 3 should in index 3</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> numbers<span class="token punctuation">[</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// return a duplicate number by reference (point)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token operator">*</span>duplication <span class="token operator">=</span> numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他方法：</p><ul><li>排序：时间复杂度是$O(nlogn)$，空间复杂度是$O(1)$</li><li>创建一个新数组：时间复杂度是$O(n)$，空间复杂度是$O(n)$</li></ul><hr><p><strong>写在最后</strong>：我的博客主要是对计算机领域所学知识的总结、回顾和思考，把每篇博客写得通俗易懂是我的目标，<font color=red size=3 face=STHeiti>分享技术和知识是一种快乐 </font>，非常欢迎大家和我一起交流学习，有任何问题都可以在评论区留言，也期待与您的深入交流（＾∀＾●）</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【C++深入浅出】一文搞懂什么是函数指针</title>
      <link href="/posts/3557.html"/>
      <url>/posts/3557.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、函数的地址"><a href="#一、函数的地址" class="headerlink" title="一、函数的地址"></a>一、函数的地址</h1><p>函数跟变量一样也有自己的地址，并且<font color=#FF0000 size=3 face=STHeiti>函数的地址就是函数名</font></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> t<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 变量t的地址是：&amp;t</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 上面这个函数的地址是：function</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二、定义函数指针"><a href="#二、定义函数指针" class="headerlink" title="二、定义函数指针"></a>二、定义函数指针</h1><p>声明函数指针是必须指定函数的<font color=#FF0000 size=3 face=STHeiti>返回值类型</font>与<font color=#FF0000 size=3 face=STHeiti>参数类型</font><br>表明这个指针，只能指向这种形式的函数</p><p>例如：</p><p>定义一个函数</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后我们定义一个函数指针pa，具体语法如下</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">// 定义函数指针pa</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>pa只能指向形如返回值是void，参数是两个int的函数</strong></p><h1 id="三、-使用函数指针"><a href="#三、-使用函数指针" class="headerlink" title="三、 使用函数指针"></a>三、 使用函数指针</h1><p>注意：传递实参的时候是直接传递函数指针（地址）或函数名（地址），不用传递函数内的参数</p><p>例如：<code>f(3, 1, pa);</code>或<code>f(3, 1, add);</code></p><p>可以这样认为</p><ul><li>函数名add是一个<strong>函数指针常量</strong></li><li>定义的函数指针pa是一个<strong>函数指针变量</strong></li></ul><p><strong>具体实例代码</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">+</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">sub</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">-</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数表中：声明一个函数指针pa，接受地址（函数名）参数</span><span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// 如果pa = add，那么说明函数指针pa指向add函数</span>    <span class="token comment" spellcheck="true">// 如果pa = sub，那么说明函数指针pa指向sub函数</span>    <span class="token comment" spellcheck="true">// *pa相当于调用这个函数，并传入参数i,j</span>    <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// pa(i, j); C++允许直接写pa来调用函数，但本质(*pa)</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 定义函数指针pa</span>    pa <span class="token operator">=</span> add<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// add是函数名所以是地址，而指针本质就是地址</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出4</span>    pa <span class="token operator">=</span> sub<span class="token punctuation">;</span>    <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> pa<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出2</span>     <span class="token comment" spellcheck="true">// pa = plus; ERROR 因为pa不能指向返回值是int的函数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再强调一下：</p><p>在使用函数指针时C++允许直接写pa来调用函数，但本质(*pa)，所以下面两行代码是等价的</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token punctuation">(</span><span class="token operator">*</span>pa<span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">pa</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 本质是(*pa)(i, j);</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>建议写<code>(*pa)(i, j);</code>因为这样表明我用的是函数指针，而不是普通的函数用法</p><hr><p><strong>写在最后</strong>：我的博客主要是对计算机领域所学知识的总结、回顾和思考，把每篇博客写得通俗易懂是我的目标，<font color=red size=3 face=STHeiti>分享技术和知识是一种快乐 </font>，非常欢迎大家和我一起交流学习，有任何问题都可以在评论区留言，也期待与您的深入交流（＾∀＾●）</p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac下sublime或终端编译运行C++的方法</title>
      <link href="/posts/14813.html"/>
      <url>/posts/14813.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-Sublime-C-11配置"><a href="#1-Sublime-C-11配置" class="headerlink" title="1.Sublime C++11配置"></a>1.Sublime C++11配置</h1><h2 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h2><ol><li>支持C++11 auto</li><li>可用scanf函数，freopen函数</li><li>ctrl+b直接运行且不会跳出终端黑框</li><li>运行速度极快</li></ol><h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ol><li>不支持bits/stdc++.h头文件</li><li>无法在控制台输入，需从in.txt读数据</li></ol><h2 id="具体方法："><a href="#具体方法：" class="headerlink" title="具体方法："></a>具体方法：</h2><ol><li><p>打开终端运行g++ –version  确定g++已经安装来</p></li><li><p>Sublime Tools-&gt;build system-&gt;new build system 创建c++11.sublime-build文件(后缀不动，前面命名随意)</p></li><li><p>将以下代码复制到文件中保存</p><pre><code>{ &quot;cmd&quot;: [&quot;clang++&quot;, &quot;${file}&quot;,&quot;-std=c++11&quot;, &quot;-stdlib=libc++&quot;, &quot;-o&quot;, &quot;${file_path}/${file_base_name}&quot;], &quot;file_regex&quot;: &quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;, &quot;working_dir&quot;: &quot;${file_path}&quot;, &quot;selector&quot;: &quot;source.c, source.c++&quot;, &quot;cmd&quot;: [&quot;bash&quot;, &quot;-c&quot;, &quot;g++ &#39;${file}&#39; -o &#39;${file_path}/${file_base_name}&#39; &amp;&amp; open -a Terminal.app &#39;${file_path}/${file_base_name}&#39;&quot;], &quot;variants&quot;: [     {         &quot;name&quot;: &quot;Run&quot;,         &quot;cmd&quot;: [&quot;bash&quot;, &quot;-c&quot;, &quot;clang++  &#39;${file}&#39; -std=c++11 -stdlib=libc++ -o &#39;${file_path}/${file_base_name}&#39; &amp;&amp; &#39;${file_path}/${file_base_name}&#39;&quot;]     }]}</code></pre></li><li><p>选择刚才的编译文件</p></li><li><p>ctrl + b 选择c++ 11 run，之后每次运行默认此运行方式</p></li><li><p>配置完成</p></li></ol><p><img src="https://img-blog.csdnimg.cn/20190927140422349.png" alt=""></p><p><a href="https://www.bilibili.com/video/av69132635" target="_blank" rel="noopener">视频演示教程</a></p><h1 id="2-终端g-编译运行cpp"><a href="#2-终端g-编译运行cpp" class="headerlink" title="2.终端g++编译运行cpp"></a>2.终端g++编译运行cpp</h1><p>Mac 上自带了g++编译器， 在命令行(终端)上输入g++， 就会得到反馈clang: error: no input files</p><p><strong>编译运行cpp</strong></p><p>法一：</p><pre><code>g++ 文件名.cpp./a.out</code></pre><p>法二：</p><pre><code>g++ -o test 文件名.cpp./test</code></pre><p>说明：</p><ul><li><code>终端运行的文件名不能有空格</code>，而sublime是可以有空格的</li><li>通过-o可以生产具体文件名的(.out)文件，否则默认在同一级目录下生成a.out</li><li>终端运行cpp可以使用freopen函数    </li><li>用vim修改in.txt后可直接运行<code>./a.out</code>，如果修改了cpp文件则需要先编译<code>g++ 文件名</code>，再运行<code>./a.out</code></li></ul><p>其实Sublime编辑器主题已经很好看了，用终端的话主要是想熟练下用vim编辑器编写代码<code>vim 文件名.cpp</code></p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由数据范围反推算法复杂度以及算法内容</title>
      <link href="/posts/12489.html"/>
      <url>/posts/12489.html</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><ul><li>ACM或者互联网笔试题的时间限制是1秒或2秒。  </li><li>在这种情况下，C++代码中的操作次数控制在$10^7$为最佳。</li></ul><h1 id="具体内容"><a href="#具体内容" class="headerlink" title="具体内容"></a>具体内容</h1><p>下面给出在不同数据范围下，代码的时间复杂度和算法该如何选择：</p><ol><li>n ≤ 30 =&gt;指数级别, dfs+剪枝，状态压缩dp</li><li>n ≤100 =&gt; O((n_{}^{3}))，floyd，dp</li><li>n ≤ 1000 =&gt; O((n_{}^{2}))，O((n_{}^{2}logn))，dp，二分</li><li>n ≤ 10000 =&gt; O((n^{2}\sqrt{n}))，块状链表</li><li>n ≤ $10_{}^{5}$ =&gt; O((nlogn)) ，各种sort，线段树、树状数组、set/map、heap、dijkstra+heap、spfa、求凸包、求半平面交、二分</li><li>n ≤ $10_{}^{6}$ =&gt;O((n))的做法：hash、双指针扫描、kmp、AC自动机<br>常数小的 O((nlogn))的做法：sort、树状数组、heap、dijkstra、spfa</li><li>n ≤ $10_{}^{7}$ =&gt; O((n))，双指针扫描、kmp、AC自动机、线性筛素数</li><li>n ≤ $10_{}^{9}$ =&gt; O((\sqrt{n}))，判断质数</li><li>n ≤ $10_{}^{18}$ =&gt; O((logn))，最大公约数  </li></ol><div class="row">    <embed src="\_posts\_pdf\test.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从数学系转计算机一年后的感悟</title>
      <link href="/posts/43681.html"/>
      <url>/posts/43681.html</url>
      
        <content type="html"><![CDATA[<p>2019年2月决定从数学转计算机，尽管一开始毫无基础，困难重重，但是我相信自己的学习能力。明天就是2020年2月了，整整一年过去了。我感觉这一年里的每天都是充满压力和挑战的，但是不知道为什么我总是很乐意去学编程，即使花很多时间只明白了一个知识点，也许是因为数学专业课太无聊了吧。</p><p>就这样，我每天一边学着数学，一边自学计算机编程，从最开始的Hello World开始，一点一点的学，我挺庆幸自己在19年的寒假那段时间沉下心来好好地把C语言学了一遍，算是打下了一定的基础，不然后面做算法题不会过渡地那么顺利。</p><p>2019年7月我参加跨专业的夏令营，机试中8个题我成功AC了5个题，排在我前面的基本都是打过ACM的，所以对于自学半年编程的自己，我还是挺满意的。<strong>我想，这应该是努力的结果吧！</strong></p><div align=left><img src="https://img-blog.csdnimg.cn/20200131215528586.png" width="70%" height="70%" /></div><p>学习计算机不管什么内容一开始都会觉得很难，可是当你学会后，回过头来看，发现其实也不怎么难，我到现在仍记得浙大翁恺老师曾说过的一句话，“<strong>计算机没有黑魔法，别人会的，你也一定会，只是你现在还不知道而已，总有一天你会把所有的东西都弄明白的</strong>”，况且我经历过数学系数分、高代、近世代数、拓扑、偏微分等课程的锤炼，于是就一次一次地挑战自己，深信自己一定能做好，就像以前一次又一次的成功。</p><p>我有时也会想，如果当初没有选择读数学，现在会是什么样呢？你要说后悔嘛，我可能会有，但是人生哪有什么如果，很多事情只有你经历过才会明白，你不尝试怎么知道呢。所以这样想的话，也没必要后悔，<strong>人生的意义不就在于多尝试嘛</strong>，而且什么时候开始也不晚，不是嘛！</p><p>我知道这条路还很漫长，但好在这是我喜欢做的事，我对未来的生活充满期待，2020年，继续加油!</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
