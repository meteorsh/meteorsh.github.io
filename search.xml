<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Master Theorem</title>
      <link href="/posts/10001.html"/>
      <url>/posts/10001.html</url>
      
        <content type="html"><![CDATA[<h1 id="主定理的内容"><a href="#主定理的内容" class="headerlink" title="主定理的内容"></a>主定理的内容</h1><p>《算法导论》中提到了主定理，用来分析<strong>分治</strong>方法带来的<br><strong>主定理是解决递归时间复杂度的一种直接方法</strong>，<strong>适合于以下类型的递推公式</strong><br>$$T(n) = aT(n/b) + O(n^d)  （a &gt;= 1 且 b &gt; 1）$$</p><p>其中$n$为问题规模，$a$为递推的子问题数量，$n/b$为每个子问题的规模（假设每个子问题的规模基本一样），$O(n^d)$为递推以外进行的计算工作量</p><p>那么问题的<font color=red size=3 face=STHeit>时间复杂度$T(n)$</font>为</p><ul><li>如果$a &lt; b^d$，则$T(n) = O(n^d)$</li><li>如果$a = b^d$，则$T(n) = O(n^dlogn)$</li><li>如果$a &gt; b^d$，则$T(n) = O(n^{log_b^a})$</li></ul><hr><p>说明：像$T(n) = T(\sqrt{n}) + 1$这个公式就不符合上面的递归类型，不过它可以通过换元得到上面形式，这里不再赘述</p><h1 id="具体应用"><a href="#具体应用" class="headerlink" title="具体应用"></a>具体应用</h1><p><strong>例：二分查找</strong></p><p>$T(n) = T(n/2) + O(n^0)$  假设每个子问题的规模基本一样</p><p> $a = 1, b = 2, d = 0,b^d = 1$ ，所以 $T(n) = O(logn)$ </p><hr><p><strong>例：归并排序</strong></p><p>$T(n) = 2T(n/2) + O(n^1)$  假设每个子问题的规模基本一样</p><p> $a = 2, b = 2, d = 1,b^d = 2$ ，所以 $T(n) = O(nlogn)$ </p><hr><p><strong>例：LeetCode 236. 二叉树的最近公共祖先</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> left <span class="token operator">=</span>  <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode<span class="token operator">*</span> right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-</span><span class="token operator">></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q<span class="token punctuation">)</span>             <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>right <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$T(n) = 2T(n/2) + O(n^0)$  假设每个子问题的规模基本一样，也就是说我们可以<font color=red size=3 face=STHeit>假设左右子树的结点数相同</font></p><p> $a = 2, b = 2, d = 0,b^d = 1$ ，所以 $T(n) = O(n)$ </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to download bilibili videos</title>
      <link href="/posts/2342.html"/>
      <url>/posts/2342.html</url>
      
        <content type="html"><![CDATA[<h1 id="唧唧Down—适合Windows-强烈推荐"><a href="#唧唧Down—适合Windows-强烈推荐" class="headerlink" title="唧唧Down—适合Windows(强烈推荐)"></a>唧唧Down—适合Windows(强烈推荐)</h1><blockquote><p>哔哩哔哩下载神器：唧唧Down<br>官网：<a href="http://client.jijidown.com/" target="_blank" rel="noopener">http://client.jijidown.com/</a></p></blockquote><ul><li>下载完成后，运行软件</li><li>只要把你想下载的b站视频网址复制到该软件就可以下载</li><li>视频清晰度可选1080p，还可以设置是否下载弹幕</li><li>用这款软件再配合potplayer，可以尽情享用b站任何视频</li></ul><p><img src="http://jfile.jijidown.com/Web/client.jijidown.com/img/newlook.png?20171208" alt=""></p><h1 id="Chrome插件—适合Mac-Windows"><a href="#Chrome插件—适合Mac-Windows" class="headerlink" title="Chrome插件—适合Mac/Windows"></a>Chrome插件—适合Mac/Windows</h1><ul><li><p>借助Chrome插件 bilibili哔哩哔哩下载助手<br><img src="https://img-blog.csdnimg.cn/20190930112541271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODI3NTk1,size_16,color_FFFFFF,t_70" alt=""></p></li><li><p>在谷歌应用商城下载安装后在b站视频右下角打开下载助手，点击合并下载即可<br><img src="https://img-blog.csdnimg.cn/2019093011282092.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODI3NTk1,size_16,color_FFFFFF,t_70" alt=""></p></li></ul><h1 id="GitHub开源youtube-dl—适合Mac-Windows"><a href="#GitHub开源youtube-dl—适合Mac-Windows" class="headerlink" title="GitHub开源youtube-dl—适合Mac/Windows"></a>GitHub开源youtube-dl—适合Mac/Windows</h1><p>项目地址: <a href="https://github.com/ytdl-org/youtube-dl" target="_blank" rel="noopener">https://github.com/ytdl-org/youtube-dl</a></p><p>一：mac下安装方法很简单<br>打开终端根目录，输入下面两条命令即可</p><pre><code>sudo curl -L https://yt-dl.org/downloads/latest/youtube-dl -o /usr/local/bin/youtube-dlsudo chmod a+rx /usr/local/bin/youtube-dl</code></pre><p>二：使用方法</p><ol><li>youtube-dl 网址      //在哪个文件夹用终端，就会把文件下载到这个文件夹</li><li>youtube-dl 网址 -o ‘你要的名字.mp4’</li><li>youtube-dl -F 网址             //查看支持的视频格式</li><li>youtube-dl -f format编号 网址  //下载对应的视频格式, 一般默认是best画质</li></ol><p>说明: 此方法不仅可以下载b站视频也可以下载youtube视频<br><img src="https://img-blog.csdnimg.cn/20190930144743703.png" alt=""></p><p>至于Windows下使用就更简单了，直接在项目地址那下载exe文件就可以使用了<br><img src="https://img-blog.csdnimg.cn/20190930144933247.png" alt=""></p><h1 id="Downie-适合Mac-强烈推荐"><a href="#Downie-适合Mac-强烈推荐" class="headerlink" title="Downie-适合Mac(强烈推荐)"></a>Downie-适合Mac(强烈推荐)</h1><p>可以下载很多网站的视频，比如Youtube、Bilibili等，号称mac上最好的视频下载器</p><p>注意：这款软件是付费的，但如果长期用的话，这点钱值的花</p>]]></content>
      
      
      <categories>
          
          <category> 计算机知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Transfer video to mp3</title>
      <link href="/posts/20236.html"/>
      <url>/posts/20236.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>视频文件大小一般都有200-300MB，而有时我只想要这个视频的背景音乐，把视频文件转换为音频文件，这样文件大小就会在10MB以内</p></blockquote><p>使用python可以快速批量的把视频文件转换为音频文件</p><h1 id="具体方法"><a href="#具体方法" class="headerlink" title="具体方法"></a>具体方法</h1><ul><li><p>安装ffmpy3库</p></li><li><p>用os模块把视频的文件名读取出来，放在列表中</p></li><li><p>然后把所有视频文件后缀替换为音频的格式</p></li><li><p>当然只改后缀是不行的，因为文件属性并没有更改，我们再用FFmpeg方法对转换后的音频文件赋予它音频的属性</p></li></ul><h2 id="Python完整代码"><a href="#Python完整代码" class="headerlink" title="Python完整代码"></a>Python完整代码</h2><p>运行下面代码即可实现视频文件转换为音频文件（注意修改文件路径）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> ffmpy3 <span class="token keyword">import</span> FFmpeg<span class="token comment" spellcheck="true"># filepath：待处理视频的文件路径</span>filepath <span class="token operator">=</span> <span class="token string">"/Users/macos/Documents/Wilson79/GitHub/video-to-mp3/video"</span>filename <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"待处理的视频文件:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># output_dir：输出音频文件的路径</span>output_dir <span class="token operator">=</span> <span class="token string">"/Users/macos/Documents/Wilson79/GitHub/video-to-mp3/music"</span><span class="token comment" spellcheck="true"># 读取上次已导出的音频文件名（防止多次运行，出现overwrited的错误）</span>exit_filename <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>output_dir<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已导出的音频文件: "</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>exit_filename<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 改文件的后缀名</span>    changefile <span class="token operator">=</span> filepath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> filename<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    change_postfix_name <span class="token operator">=</span>filename<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'mp4'</span><span class="token punctuation">,</span> <span class="token string">'mp3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'flv'</span><span class="token punctuation">,</span> <span class="token string">'mp3'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 另外的视频格式请自行添加</span>    outputfile <span class="token operator">=</span> output_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> change_postfix_name    <span class="token keyword">if</span> change_postfix_name <span class="token keyword">in</span> exit_filename<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>changefile<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 利用FFmpeg进行转换</span>    fpg <span class="token operator">=</span> FFmpeg<span class="token punctuation">(</span>inputs<span class="token operator">=</span><span class="token punctuation">{</span>changefile<span class="token punctuation">:</span> None<span class="token punctuation">}</span><span class="token punctuation">,</span>                 outputs<span class="token operator">=</span><span class="token punctuation">{</span>outputfile<span class="token punctuation">:</span> <span class="token string">'-vn -ar 44100 -ac 2 -ab 192 -f mp3'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># mp3也可以换成wav等格式</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>fpg<span class="token punctuation">.</span>cmd<span class="token punctuation">)</span>    fpg<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n任务完成！！！"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="运行后的效果"><a href="#运行后的效果" class="headerlink" title="运行后的效果"></a>运行后的效果</h1><p><img src="https://img-blog.csdnimg.cn/20200212160136119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzODI3NTk1,size_16,color_FFFFFF,t_70" alt=""></p><div align=center><img src="https://img-blog.csdnimg.cn/20200212153448976.png" width="100%" height="70%" /></div><div align=center><img src="https://img-blog.csdnimg.cn/20200212153510214.png" width="100%" height="70%" /></div>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
